@inject IToastService toastService
@inject HttpClient Http

<div class="top-row pl-4 navbar navbar-dark">
    @*<a class="navbar-brand" href=""> Pañol DuocUC </a>*@
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        @*<span class="navbar-toggler-icon"></span>*@

    </button>
    <img class="navimg card-img-top" src="/images/logo_duoc_uc.svg" alt="card image cap">
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="solicitudes/recibidas">
                <span class="oi oi-clipboard" aria-hidden="true"></span> Solicitudes
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="productos/todos">
                <span class="oi oi-grid-three-up" aria-hidden="true"></span> Productos
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="usuarios">
                <span class="oi oi-people" aria-hidden="true"></span> Usuarios
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="reportes/solicitudes">
                <span class="oi oi-pie-chart" aria-hidden="true"></span> Reportes
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    //activar para las notificaciones

    private List<PanolBlazor.DataModel.AlarmaStockModel> UsuarioAlarma;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(60000);
            Console.WriteLine("primer paso");
        }
        await Task.Delay(6000);
        UsuarioAlarma = await Http.GetJsonAsync<List<PanolBlazor.DataModel.AlarmaStockModel>>("http://localhost:8080/alarm/todos");
        Console.WriteLine("esperanza paso");
        //Console.WriteLine(UsuarioAlarma);
        if (UsuarioAlarma.Count() != 0)
        {
            await Task.Delay(2000);
            Console.WriteLine(" paso");
            foreach (var item in UsuarioAlarma)
            {
                await Task.Delay(2000);
                await OnShowHtml(item.subproductoAS, item.actualizacionSA, item.escuelaSA, item.stockTotal, item.stock);
            }

            this.StateHasChanged();

        }
        else
        {
            Console.WriteLine(" paso el nulo");
            await Task.Delay(10000);
            this.StateHasChanged();

        }


    }


    private async Task OnShowHtml(string subproducto, string fecha, string escuela, int stockTotal, int stock)
    {
        await Task.Delay(2000);
        double PorcentajeStock = stock / stockTotal;
        Console.WriteLine(PorcentajeStock);
        if (PorcentajeStock < 0.5 && PorcentajeStock >= 0.25)
        {

            RenderFragment message =@<text>  Para la @escuela  <strong>, en  @fecha quedan @stock cantidad</strong> </text>;
            toastService.ShowToast(ToastLevel.Warning, message, "Falta stock de " + subproducto);

            }
            if (PorcentajeStock <= 0.25 && PorcentajeStock >= 0)
            {

            RenderFragment message =@<text>  Para la @escuela  <strong>, en  @fecha quedan @stock cantidad</strong> </text>;
            toastService.ShowToast(ToastLevel.Error, message, "Falta critica stock de " + subproducto);

            }
}


}

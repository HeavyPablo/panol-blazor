@page "/reportes/productos"
@layout Layout.ReportesLayout
@attribute [Authorize]

@inject HttpClient http
@inject IJSRuntime js
@using DataModel;

@if (escuelas == null || productos == null)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <img src="images/loading.svg" alt="Cargando" />
        </div>
    </div>
}
else
{
    <div class="col-12">
        <div class="py-3">
            <div class="shadow card">
                <div class="card-header font-weight-bold" style="color: #343A40">
                    Actividad de Productos
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-8">
                            <div id="chartProductos" style="width: 100%; height: 400px;"></div>
                        </div>
                        <div class="col-4">
                            <a class="stretched-link text-center text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white d-flex align-items-center justify-content-center" @onclick="@(e => HandlerExportFile(selectExport.productosHistoricoAccion))">
                                <div class="text-center">
                                    Histórico Actividad de Productos
                                    <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">Sacar reporte de todos los movimientos de los productos.</p>
                                    <span class="pt-5 oi oi-data-transfer-download" style="font-size:200%"></span>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="py-3 row align-content-stretch flex-wrap">
            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-producto-todos.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosTotal))">
                                        Productos Total
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar reporte de todos los productos registrados en la base de datos.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/home-acciones-rapidas-recibir.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosSolicitados))">
                                        Productos Solicitados
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar reporte de los productos solicitados durante un período de tiempo.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-producto-deshabilitados.png)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosDeshabilitados))">
                                        Productos Deshabilitados
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar reporte de todos los productos dados de baja.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-producto-stock-normal.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosStockNormal))">
                                        Productos Stock Normal
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar Reporte de los productos con stock normal.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-producto-stock-bajo.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosStockBajo))">
                                        Productos Stock Bajo
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar Reporte de los productos con bajo stock.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4 pb-2">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-producto-stock-critico.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.productosStockCritico))">
                                        Productos Stock Crítico
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">
                                            Sacar Reportes de los productos con stock crítico.
                                        </p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EscuelaModel> escuelas = new List<EscuelaModel>();
    private List<LogProductoModel> productos = new List<LogProductoModel>();
    private List<SubcategoriaModel> subcategorias = new List<SubcategoriaModel>();

    protected override async Task OnInitializedAsync()
    {
        productos = null;
        escuelas = null;
        subcategorias = null;
        await Task.Delay(1000);
        productos = await http.GetJsonAsync<List<LogProductoModel>>("http://localhost:8080/log-producto/");
        escuelas = await http.GetJsonAsync<List<EscuelaModel>>("http://localhost:8080/escuela/");
        subcategorias = await http.GetJsonAsync<List<SubcategoriaModel>>("http://localhost:8080/subcategoria/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await js.GenerateChart("chartProductos", TipoChart.DateBasedData, DataToChartProductosSolicitados(productos));
        }
    }

    private string DataToChartProductosSolicitados(List<LogProductoModel> productosToParseChart)
    {
        string fragmentJson = "";
        foreach (LogProductoModel producto in productosToParseChart)
        {
            fragmentJson += @"{""fechaCreacion"": """ + producto.fecha.Remove(producto.fecha.IndexOf(' ')) + @""", ""id"":""" + producto.idProducto + @"""},";
        }
        fragmentJson = fragmentJson.TrimEnd(',');
        Console.WriteLine(fragmentJson);
        return "[" + fragmentJson + "]";
    }

    private async Task HandlerExportFile(selectExport selected)
    {
        List<LogProductoModel> products;
        List<ProductoModel> _products;
        List<ProductoModel> productosToExport;
        string opcion;

        switch (selected)
        {
            case selectExport.productosHistoricoAccion:
                products = await http.GetJsonAsync<List<LogProductoModel>>("http://localhost:8080/log-producto/");
                ExportExcel(products, selectExport.productosHistoricoAccion.ToString());
                break;

            case selectExport.productosTotal:
                products = await http.GetJsonAsync<List<LogProductoModel>>("http://localhost:8080/log-producto/operacion/crear");
                ExportExcel(products, selectExport.productosTotal.ToString());
                break;
            case selectExport.productosSolicitados:
                products = await http.GetJsonAsync<List<LogProductoModel>>("http://localhost:8080/log-producto/estado/enuso");
                ExportExcel(products, selectExport.productosSolicitados.ToString());
                break;
            case selectExport.productosDeshabilitados:
                products = await http.GetJsonAsync<List<LogProductoModel>>("http://localhost:8080/log-producto/estado/debaja");
                ExportExcel(products, selectExport.productosDeshabilitados.ToString());
                break;
            case selectExport.productosStockNormal:
                _products = await http.GetJsonAsync<List<ProductoModel>>("http://localhost:8080/producto");
                productosToExport = new List<ProductoModel>();

                foreach(SubcategoriaModel subcat in subcategorias)
                {
                    List<ProductoModel> productosPorSubcategoria = new List<ProductoModel>();
                    foreach(ProductoModel pd in _products)
                    {
                        if (pd.subcategoria.id == subcat.id)
                        {
                            productosPorSubcategoria.Add(pd);
                        }
                    }

                    if (productosPorSubcategoria.Count >= 8)
                    {
                        productosToExport.AddRange(productosPorSubcategoria);
                    }
                }
                ExportExcelProducto(productosToExport, selectExport.productosStockNormal.ToString());
                break;

            case selectExport.productosStockBajo:
                _products = await http.GetJsonAsync<List<ProductoModel>>("http://localhost:8080/producto");
                productosToExport = new List<ProductoModel>();

                foreach (SubcategoriaModel subcat in subcategorias)
                {
                    List<ProductoModel> productosPorSubcategoria = new List<ProductoModel>();
                    foreach (ProductoModel pd in _products)
                    {
                        if (pd.subcategoria.id == subcat.id)
                        {
                            productosPorSubcategoria.Add(pd);
                        }
                    }

                    if (productosPorSubcategoria.Count > 3 && productosPorSubcategoria.Count < 8)
                    {
                        productosToExport.AddRange(productosPorSubcategoria);
                    }
                }
                ExportExcelProducto(productosToExport, selectExport.productosStockBajo.ToString());
                break;

            case selectExport.productosStockCritico:
                _products = await http.GetJsonAsync<List<ProductoModel>>("http://localhost:8080/producto");
                productosToExport = new List<ProductoModel>();

                foreach (SubcategoriaModel subcat in subcategorias)
                {
                    List<ProductoModel> productosPorSubcategoria = new List<ProductoModel>();
                    foreach (ProductoModel pd in _products)
                    {
                        if (pd.subcategoria.id == subcat.id)
                        {
                            productosPorSubcategoria.Add(pd);
                        }
                    }

                    if (productosPorSubcategoria.Count <= 3)
                    {
                        productosToExport.AddRange(productosPorSubcategoria);
                    }
                }
                ExportExcelProducto(productosToExport, selectExport.productosStockCritico.ToString());
                break;
        }
    }

    private void ExportExcel(List<LogProductoModel> products, string filename)
    {
        if (products.Count == 0 || products == null)
        {
            js.MostrarMensaje("Upps!", "Al parecer no hay datos sobre este indicador", TipoMensajeSweetAlert.warning);
            return;
        }

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add(filename);

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    from f in products
                    select new
                    {
                        f.log,
                        f.idProducto,
                        f.estado,
                        f.operacion,
                        f.idEscuela,
                        f.idResponsable,
                        f.fecha
                    }, true);

            var header = worksheet.Cells["A1:G1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Font.Bold = true;
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            js.GuardarComoExcel(filename + ".xlsx", package.GetAsByteArray());
        }
    }

    private void ExportExcelProducto(List<ProductoModel> products, string filename)
    {
        if (products.Count == 0 || products == null)
        {
            js.MostrarMensaje("Upps!", "Al parecer no hay datos sobre este indicador", TipoMensajeSweetAlert.warning);
            return;
        }

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add(filename);

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    from f in products
                    select new
                    {
                        f.id,
                        f.descripcion,
                        f.estado,
                        f.fechaActualizacion,
                        f.fechaCreacion,
                        f.nombre,
                        nombreEscuela = f.escuela.nombre,
                        nombreSubcategoria = f.subcategoria.nombre
                    }, true);

            var header = worksheet.Cells["A1:H1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Font.Bold = true;
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            js.GuardarComoExcel(filename + ".xlsx", package.GetAsByteArray());
        }
    }

    public enum selectExport
    {
        productosHistoricoAccion, productosTotal, productosSolicitados, productosDeshabilitados, productosStockNormal, productosStockBajo, productosStockCritico
    }
}


@page "/reportes/solicitudes"
@layout Layout.ReportesLayout
@attribute [Authorize]

@inject HttpClient http
@inject IJSRuntime js
@using DataModel
@using System.Data
@using System.Reflection


@if (escuelas == null || solicitudes == null)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <img src="images/loading.svg" alt="Cargando" />
        </div>
    </div>
}
else
{
    <div class="col-12">
        <div class="py-3">
            <div class="shadow card">
                <div class="card-header font-weight-bold" style="color: #343A40">
                    Actividad de Solicitudes
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-8">
                            <div id="chartSolicitudes" style="width: 100%; height: 400px;"></div>
                        </div>
                        <div class="col-4">
                            <button class="stretched-link text-center text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white d-flex align-items-center justify-content-center" @onclick="@(e => HandlerExportFile(selectExport.solicitudesHistoricoAccion))">
                                <div class="text-center">
                                    Histórico Actividad de Solicitudes
                                    <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">Sacar reporte de todos los movimientos de las solicitudes.</p>
                                    <span class="pt-5 oi oi-data-transfer-download" style="font-size:200%"></span>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="py-3 row align-content-stretch flex-wrap">
            <div class="col-4">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-solicitud-crear.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.solicitudesCreadas))">
                                        Solicitudes Creadas
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">Sacar reportes de todas las solicitudes creadas.</p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-escuelas.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.solicitudesPorEscuela))">
                                        Solicitudes Por Escuela
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">Sacar reportes de todas las solicitudes creadas en base a la escuela seleccionada.</p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-4">
                <div class="shadow card h-100">
                    <div class="card-body">
                        <div class="w-100 h-100 py-1">
                            <div class="row no-gutters position-relative bg-image h-100" style="background-image: url(images/images-core/reportes-solicitud-tipo-solicitud.jpg)">
                                <div class="col-6 position-static bg-dark">
                                    <a class="stretched-link text-decoration-none btn p-2 btn-dark rounded-0 w-100 h-100 text-white" @onclick="@(e => HandlerExportFile(selectExport.solicitudesPorTipo))">
                                        Solicitudes Por Tipo de Solicitud
                                        <p class="text-muted text-center pt-2 m-0" style="font-size: 90%">Sacar reportes de todas las solicitudes creadas en base al tipo de solicitud seleccionada.</p>
                                    </a>
                                </div>
                                <div class="col-6 align-self-center">
                                    <p class="text-center" style="font-size:150%"><span class="pt-3 oi oi-data-transfer-download"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EscuelaModel> escuelas = new List<EscuelaModel>();
    private List<LogSolicitudModel> solicitudes = new List<LogSolicitudModel>();
    string jsonEscuelas = "";

    protected override async Task OnInitializedAsync()
    {
        escuelas = null;
        jsonEscuelas = "";
        solicitudes = null;
        await Task.Delay(1000);
        escuelas = await http.GetJsonAsync<List<EscuelaModel>>("http://localhost:8080/escuela/");
        solicitudes = await http.GetJsonAsync<List<LogSolicitudModel>>("http://localhost:8080/log-solicitud/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await js.GenerateChart("chartSolicitudes", TipoChart.DateBasedData, DataToChartSolicitudes(solicitudes));
        }
    }

    private string DataToChartSolicitudes(List<LogSolicitudModel> solicitudesToParseChart)
    {
        string fragmentJson = "";
        foreach (LogSolicitudModel soli in solicitudesToParseChart)
        {
            fragmentJson += @"{""fechaCreacion"": """ + soli.fechaCambioSolicitud.Remove(soli.fechaCambioSolicitud.IndexOf(' ')) + @""", ""id"":""" + soli.id + @"""},";
        }
        fragmentJson = fragmentJson.TrimEnd(',');
        Console.WriteLine(fragmentJson);
        return "[" + fragmentJson + "]";
    }

    private async Task HandlerExportFile(selectExport selected)
    {
        List<LogSolicitudModel> solis;
        string opcion;

        switch (selected)
        {
            case selectExport.solicitudesHistoricoAccion:
                solis = await http.GetJsonAsync<List<LogSolicitudModel>>("http://localhost:8080/log-solicitud/");
                ExportExcel(solis, selectExport.solicitudesHistoricoAccion.ToString());
                break;

            case selectExport.solicitudesCreadas:
                solis = await http.GetJsonAsync<List<LogSolicitudModel>>("http://localhost:8080/log-solicitud/log/crear");
                ExportExcel(solis, selectExport.solicitudesCreadas.ToString());
                break;

            case selectExport.solicitudesPorEscuela:
                jsonEscuelas = EscuelaModel.SimpleFormatJson(escuelas);
                opcion = await js.SelectOption("Seleccione escuela", jsonEscuelas);

                if (opcion == "" || opcion == null)
                {
                    break;
                }
                solis = await http.GetJsonAsync<List<LogSolicitudModel>>("http://localhost:8080/log-solicitud/escuelaSolicitante/" + opcion);
                ExportExcel(solis, selectExport.solicitudesPorEscuela.ToString());
                break;

            case selectExport.solicitudesPorTipo:
                string jsonTipoSolicitud = SolicitudModel.TipoSolicitudFormatJson();
                opcion = await js.SelectOption("Seleccione tipo de solicitud", jsonTipoSolicitud);

                if (opcion == "" || opcion == null)
                {
                    break;
                }
                solis = await http.GetJsonAsync<List<LogSolicitudModel>>("http://localhost:8080/log-solicitud/tipoSolicitud/" + opcion);
                ExportExcel(solis, selectExport.solicitudesPorEscuela.ToString());
                break;

            default:
                break;
        }
    }

    private void ExportExcel(List<LogSolicitudModel> solis, string filename)
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add(filename);

            var tableBody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    from f in solis
                    select new
                    {
                        f.log,
                        f.idSolicitud,
                        f.estadoSolicitud,
                        f.idUsuario,
                        f.tipoSolicitud,
                        f.idEscuelaSolicitante,
                        f.idResponsable,
                        f.fechaCreacionSolicitud,
                        f.fechaCambioSolicitud
                    }, true);

            var header = worksheet.Cells["A1:I1"];
            worksheet.DefaultColWidth = 25;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            tableBody.Style.Fill.PatternType = ExcelFillStyle.Solid;
            tableBody.Style.Fill.BackgroundColor.SetColor(Color.WhiteSmoke);
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Medium);
            header.Style.Font.Color.SetColor(Color.White);
            header.Style.Font.Bold = true;
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);

            js.GuardarComoExcel( filename + ".xlsx", package.GetAsByteArray());
        }
    }

    public enum selectExport
    {
        solicitudesHistoricoAccion, solicitudesCreadas, solicitudesPorEscuela, solicitudesPorTipo
    }
}

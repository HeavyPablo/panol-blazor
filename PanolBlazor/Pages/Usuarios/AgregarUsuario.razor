@page "/usuarios/agregar"
@attribute [Authorize]
@layout Layout.AdmUsuarioLayout
@using System.Net.Http
@inject HttpClient Http

@inject IJSRuntime Js
@inject NavigationManager Navigation


<h3>Agregar a un Usuario</h3>

<div>
    <EditForm Model="@NuevoUsuarioModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@
        <div class="form-group">
            <label for="username">Nombre de Usuario</label>
            <input type="text" id="username" class="form-control" @bind="NuevoUsuarioModel.Username" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.Username)" />
        </div>
        <div class="form-group">
            <label for="name">Nombre</label>
            <input type="text" id="name" class="form-control" @bind="NuevoUsuarioModel.Nombre" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.Nombre)" />
        </div>
        <div class="form-group">
            <label for="ApPaterno">Apellido Paterno</label>
            <input type="text" id="ApPaterno" class="form-control" @bind="NuevoUsuarioModel.ApPaterno" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.ApPaterno)" />
        </div>
        <div class="form-group">
            <label for="ApMaterno">Apellido Materno</label>
            <input type="text" id="ApMaterno" class="form-control" @bind="NuevoUsuarioModel.ApMaterno" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.ApMaterno)" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="text" id="email" class="form-control" @bind="NuevoUsuarioModel.Email" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.Email)" />
        </div>

        <div class="form-group">
            <label for="phone">Teléfono</label>
            <input type="text" id="phone" class="form-control" @bind="NuevoUsuarioModel.Telefono" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.Telefono)" />
        </div>

        <div class="form-group">
            <label for="rut">Rut</label>
            <input type="text" id="rut" class="form-control" @bind="NuevoUsuarioModel.rut" />
            <ValidationMessage For="@(() => NuevoUsuarioModel.rut)" />
        </div>
        @*<div class="form-group">
            <label for="perfilSelect">Perfil</label>
            <select class="form-control opcion" id="perfilSelect" @bind="NuevoUsuarioModel.TipoPerfil">
                <option value="">Seleccione un tipo de perfil</option>
                <option value="ALUMNO">ALUMNO</option>
                <option value="DOCENTE">DOCENTE</option>
                <option value="COORDINADOR">COORDINADOR</option>
                <option value="DIRECTOR">DIRECTOR</option>
                <option value="PANOLERO">PANOLERO</option>
            </select>
            <ValidationMessage For="@(() => NuevoUsuarioModel.TipoPerfil)" />


        </div>*@
        <div class="form-group">
            <label for="perfilSelect">Perfil</label>
            <select class="form-control" id="perfilSelect" @bind="@SelectedOpc">

                <option value="">--Eliga una opcion de perfil--</option>
                @foreach (var perfil in PerfilList)
                {
                    <option value="@perfil.Code"> @perfil.Name </option>
                }
                }

            </select>

        </div>
        @if (@SelectedOpc == "ALUMNO")
        {
            <div class="form-group">
                <label for="escSelect">Carrera</label>
                <select class="form-control" id="escSelect" @bind="@SelectedCar">

                    <option value="">--Eliga una carrera--</option>
                    @foreach (var carrera in CarList)
                    {
                        <option value="@carrera.Code"> @carrera.Name </option>
                    }
                    }

                </select>

            </div>


        }
        else if (@SelectedOpc == "DOCENTE" || @SelectedOpc == "COORDINADOR" || @SelectedOpc == "DIRECTOR")
        {
            <div class="form-group">
                <label for="carSelect">Escuela</label>
                <select class="form-control" id="carSelect" @bind="@SelectedEsc">

                    <option value="">--Eliga una escuela--</option>
                    @foreach (var escuela in EscList)
                    {
                        <option value="@escuela.Code"> @escuela.Name </option>
                    }
                    }

                </select>

            </div>

        }

        <button type="submit" class="btn btn-success" value="Save">Guardar Usuario</button>
        <button type="reset" class="btn btn-success borrar">Borrar Datos</button>
    </EditForm>
</div>

@code {
    private PanolBlazor.FormModel.NuevoUsuarioModel NuevoUsuarioModel = new FormModel.NuevoUsuarioModel();

    // Seleccionar opciones de perfil
    string selectedOpc;

    string SelectedOpc
    {
        get => selectedOpc;
        set
        {
            selectedOpc = value;

        }
    }

    List<Perfil> PerfilList = new List<Perfil>() { new Perfil ("ALUMNO", "Alumno"),
                                                      new Perfil ("DOCENTE", "Docente"),
                                                      new Perfil ("COORDINADOR", "Coordinador"),
                                                      new Perfil ("DIRECTOR", "Director"),
                                                      new Perfil ("PANOLERO", "Pañolero")
                                                                                };

    public class Perfil
    {

        public Perfil(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }

    }

    // Seleccionar opciones de escuela

    string selectedEsc;

    string SelectedEsc
    {
        get => selectedEsc;
        set
        {
            selectedEsc = value;

        }
    }

    List<Escuela> EscList = new List<Escuela>() { new Escuela ("1", "Escuela de Ingeniería"),
                                                      new Escuela ("2", "Escuela de Informática y Telecomunicaciones"),
                                                      new Escuela ("3", "Escuela de Construcción"),
                                                      new Escuela ("4", "Escuela de Administración y Negocios")  };

    public class Escuela
    {

        public Escuela(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }

    }
    // Seleccionar opciones de Carrera

    string selectedCar;

    string SelectedCar
    {
        get => selectedCar;
        set
        {
            selectedCar = value;

        }
    }

    List<Carrera> CarList = new List<Carrera>() {     new Carrera ("1", "Técnico en Mecánica Automotriz y Autotrónica"),
                                                      new Carrera ("2", "Ingeniería en Mecánica Automotriz y Autotrónica"),
                                                      new Carrera ("3", "Administración de Redes y Telecomunicaciones"),
                                                      new Carrera ("4", "Analista Programador Computacional"),
                                                      new Carrera ("5", "Ingeniería en Conectividad y Redes"),
                                                      new Carrera ("6", "Ingeniería en Informática"),
                                                      new Carrera ("7", "Técnico en Construcción"),
                                                      new Carrera ("8", "Ingeniería en Construcción"),
                                                      new Carrera ("9", "Ingeniería en Prevención de Riesgos"),
                                                      new Carrera ("10", "Técnico en Marketing"),
                                                      new Carrera ("11", "Técnico en Gestión de Personas"),
                                                      new Carrera ("12", "Contabilidad General Mención Legislación Tributaria"),
                                                      new Carrera ("13", "Auditoría"),
                                                      new Carrera ("14", "Ingeniería en Administración Mención Gestión de Personas"),
                                                      new Carrera ("15", "Ingeniería en Gestión Logística"),
                                                      new Carrera ("16", "Ingeniería en Administración Mención Marketing"),
                                                      new Carrera ("17", "Ingeniería en Administración Mención Finanzas")

    };

    public class Carrera
    {

        public Carrera(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }

    }

    // Proceso de guardado

    private async Task HandleValidSubmit()
    {
        var response = await Js.Confirm("¿Estás seguro/a?", "Al confirmar se agregara a este usuario.", TipoMensajeSweetAlert.question);

        if (response)
        {
            if (SelectedOpc == "PANOLERO") {

                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoPanolero"": """ + NuevoUsuarioModel.Email + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                Console.WriteLine(result);
            }
            else if (SelectedOpc == "ALUMNO") {

                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoAlumno"": """ + NuevoUsuarioModel.Email + @""",
                       ""carrera"": """ + SelectedCar + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                Console.WriteLine(result);
            }
            else if (SelectedOpc == "DOCENTE") {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoDocente"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                Console.WriteLine(result);
            }
            else if (SelectedOpc == "COORDINADOR") {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoCoordinador"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                Console.WriteLine(result);
            }
            else if (SelectedOpc == "DIRECTOR") {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoDirector"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                Console.WriteLine(result);
            };





            
            await Js.MostrarMensaje("Guardado!", "Se ha creado correctamente el usuario.", TipoMensajeSweetAlert.success);
            //recordar modificar esto
            Navigation.NavigateTo("/usuarios/");
        }
    }
}




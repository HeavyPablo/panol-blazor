
@inject IJSRuntime Js
@inject HttpClient Http
@using System.Net.Http
@using DataModel
@using FormModel


<div class="modal fade" id="AgregUsuarioModal" tabindex="-1" aria-labelledby="AgregUsuarioModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar nuevo usuario</h5>
                <button type="button" class="close"  @onclick="@(e =>  OpenModalCerrar())" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                @if (ModeloEscuela != null && ModeloCarrera != null)
                {

                    <EditForm Model="@NuevoUsuarioModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        @*<ValidationSummary />*@
                        <div class="form-group">
                            <label for="username">Nombre de Usuario</label>
                            <input type="text" id="username" class="form-control" @bind="NuevoUsuarioModel.Username" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.Username)" />
                        </div>
                        <div class="form-group">
                            <label for="name">Nombre</label>
                            <input type="text" id="name" class="form-control" @bind="NuevoUsuarioModel.Nombre" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.Nombre)" />
                        </div>
                        <div class="form-group">
                            <label for="ApPaterno">Apellido Paterno</label>
                            <input type="text" id="ApPaterno" class="form-control" @bind="NuevoUsuarioModel.ApPaterno" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.ApPaterno)" />
                        </div>
                        <div class="form-group">
                            <label for="ApMaterno">Apellido Materno</label>
                            <input type="text" id="ApMaterno" class="form-control" @bind="NuevoUsuarioModel.ApMaterno" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.ApMaterno)" />
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="text" id="email" class="form-control" @bind="NuevoUsuarioModel.Email" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="phone">Teléfono</label>
                            <input type="text" id="phone" class="form-control" @bind="NuevoUsuarioModel.Telefono" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.Telefono)" />
                        </div>

                        <div class="form-group">
                            <label for="rut">Rut</label>
                            <input type="text" id="rut" class="form-control" @bind="NuevoUsuarioModel.rut" />
                            <ValidationMessage For="@(() => NuevoUsuarioModel.rut)" />
                        </div>

                        <div class="form-group">
                            <label for="perfilSelect">Perfil</label>
                            <select class="form-control" id="perfilSelect" @bind="@SelectedOpc">

                                <option value="">--Eliga una opcion de perfil--</option>
                                @foreach (var perfil in PerfilList)
                                {
                                    <option value="@perfil.Code"> @perfil.Name </option>
                                }


                            </select>

                        </div>
                        @if (@SelectedOpc == "ALUMNO")
                        {
                            <div class="form-group">
                                <label for="escSelect">Carrera</label>
                                <select class="form-control" id="escSelect" @bind="@SelectedCar">

                                    <option value="">--Eliga una carrera--</option>
                                    @foreach (CarreraModel carrera in ModeloCarrera)
                                    {
                                        <option value="@carrera.id.ToString()"> @carrera.nombre </option>
                                    }


                                </select>

                            </div>


                        }
                        else if (@SelectedOpc == "DOCENTE" || @SelectedOpc == "COORDINADOR" || @SelectedOpc == "DIRECTOR")
                        {
                            <div class="form-group">
                                <label for="carSelect">Escuela</label>
                                <select class="form-control" id="carSelect" @bind="@SelectedEsc">

                                    <option value="">--Eliga una escuela--</option>
                                    @foreach (EscuelaModel escuela in ModeloEscuela)
                                    {
                                        <option value="@escuela.id.ToString()"> @escuela.nombre </option>
                                    }


                                </select>

                            </div>

                        }
                        <div class="justify-content-center">
                            <button type="submit" class="btn btn-success" value="Save">Guardar Usuario</button>
                            <button type="reset" class="btn btn-success borrar">Borrar Datos</button>
                        </div>

                    </EditForm>

                }
                else
                {


                    <div class="row justify-content-center">
                        <img src="images/loading.svg" alt="Cargando" />
                        <p> Cargando </p>
                    </div>


                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary"  @onclick="@(e =>  OpenModalCerrar())" data-dismiss="modal">Salir</button>

            </div>
        </div>
    </div>
</div>


@code {
    //falta validaciones en el Agregar ==> verificar Rut, email , ver si el usuario se puede repetir.
    [Parameter] public List<EscuelaModel> ModeloEscuela { get; set; }
    [Parameter] public List<CarreraModel> ModeloCarrera { get; set; }

    private PanolBlazor.FormModel.NuevoUsuarioModel NuevoUsuarioModel = new FormModel.NuevoUsuarioModel();

    // Seleccionar opciones de perfil
    string selectedOpc;

    string SelectedOpc
    {
        get => selectedOpc;
        set
        {
            selectedOpc = value;

        }
    }

    List<Perfil> PerfilList = new List<Perfil>() { new Perfil ("ALUMNO", "Alumno"),
                                                      new Perfil ("DOCENTE", "Docente"),
                                                      new Perfil ("COORDINADOR", "Coordinador"),
                                                      new Perfil ("DIRECTOR", "Director"),
                                                      new Perfil ("PANOLERO", "Pañolero")
                                                                                };

    public class Perfil
    {

        public Perfil(string code, string name)
        {
            Code = code;
            Name = name;
        }
        public string Code { get; set; }
        public string Name { get; set; }

    }

    // Seleccionar opciones de escuela

    string selectedEsc;

    string SelectedEsc
    {
        get => selectedEsc;
        set
        {
            selectedEsc = value;

        }
    }


    // Seleccionar opciones de Carrera

    string selectedCar;

    string SelectedCar
    {
        get => selectedCar;
        set
        {
            selectedCar = value;

        }
    }



    // Proceso de guardado

    private async Task HandleValidSubmit()
    {
        var response = await Js.Confirm("¿Estás seguro/a?", "Al confirmar se agregara a este usuario.", TipoMensajeSweetAlert.question);

        if (response)
        {

            string username = await Js.GetFromLocalStorage("username");
            UsuarioModel usuario = await Http.GetJsonAsync<UsuarioModel>("http://localhost:8080/usuario/username/" + username);
            if (SelectedOpc == "PANOLERO")
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                    @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""logResponsable"": """ + usuario.id + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoPanolero"": """ + NuevoUsuarioModel.Email + @"""}"
                )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                NuevoUsuarioModel = new NuevoUsuarioModel();
                SelectedOpc = "";

                StateHasChanged();

                Console.WriteLine(result);
            }
            else if (SelectedOpc == "ALUMNO")
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                    @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""logResponsable"": """ + usuario.id + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoAlumno"": """ + NuevoUsuarioModel.Email + @""",
                       ""carrera"": """ + SelectedCar + @"""}"
                )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                NuevoUsuarioModel = new NuevoUsuarioModel();
                SelectedOpc = "";
                SelectedCar = "";
                StateHasChanged();
                Console.WriteLine(result);
            }
            else if (SelectedOpc == "DOCENTE")
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""logResponsable"": """ + usuario.id + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoDocente"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                NuevoUsuarioModel = new NuevoUsuarioModel();
                SelectedOpc = "";
                SelectedEsc = "";
                StateHasChanged();

                Console.WriteLine(result);
            }
            else if (SelectedOpc == "COORDINADOR")
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""logResponsable"": """ + usuario.id + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoCoordinador"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                NuevoUsuarioModel = new NuevoUsuarioModel();
                SelectedOpc = "";
                SelectedEsc = "";
                StateHasChanged();

                Console.WriteLine(result);
            }
            else if (SelectedOpc == "DIRECTOR")
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/usuario"),
                    Content = new StringContent(
                        @"{""username"": """ + NuevoUsuarioModel.Username + @""",
                       ""password"": """ + NuevoUsuarioModel.rut + @""",
                       ""perfil"": """ + SelectedOpc + @""",
                       ""rut"": """ + NuevoUsuarioModel.rut + @""",
                       ""apellidoPaterno"": """ + NuevoUsuarioModel.ApPaterno + @""",
                       ""apellidoMaterno"": """ + NuevoUsuarioModel.ApMaterno + @""",
                       ""nombre"": """ + NuevoUsuarioModel.Nombre + @""",
                       ""logResponsable"": """ + usuario.id + @""",
                       ""telefono"": """ + NuevoUsuarioModel.Telefono + @""",
                       ""correoDirector"": """ + NuevoUsuarioModel.Email + @""",
                       ""escuela"": """ + SelectedEsc + @"""}"
                    )
                };
                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
                NuevoUsuarioModel = new NuevoUsuarioModel();
                SelectedOpc = "";
                SelectedEsc = "";
                StateHasChanged();

                Console.WriteLine(result);
            };

            await Js.MostrarMensaje("Guardado!", "Se ha creado correctamente el usuario.", TipoMensajeSweetAlert.success);

            //await Js.CloseModal("AgregUsuarioModal");

        }


    }

    //cerrar modal

    private void OpenModalCerrar()
    {
        NuevoUsuarioModel = new NuevoUsuarioModel();
        List<EscuelaModel> EscuelaParaSeleccionar = null;
        List<CarreraModel> CarreraParaSeleccionar = null;
        SelectedOpc = "";
        SelectedCar = "";
        StateHasChanged();
        Js.CloseModal("AgregUsuarioModal");

    }
}

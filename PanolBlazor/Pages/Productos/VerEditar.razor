@page "/productos/{id}"
@layout Layout.ProductosLayout
@attribute [Authorize]

@inject HttpClient Http
@inject IJSRuntime Js;
@inject NavigationManager Navigate

@using DataModel

@if (Producto == null || Subcategorias == null || Categorias == null)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <img src="images/loading.svg" alt="Cargando" />
        </div>
    </div>
}
else if (Producto.id <= 0 || Subcategorias.Count <= 0 || Categorias.Count <= 0)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <p class="text-muted">No se encontraron productos.</p>
        </div>
    </div>
}
else
{
    <div class="py-3 col-12">
        <div class="shadow card">
            <div class="card-body">
                <div class="col-12">
                    <div class="row justify-content-between">
                        <div class="d-flex">
                            <div class="px-2">
                                <h3 class="text-muted">@Producto.nombre | @Producto.id</h3>
                            </div>
                        </div>
                        <button type="button" class="btn btn-dark"><span class="oi oi-arrow-thick-left"></span> Atrás</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="py-3 col-12">
        <div class="shadow card">
            <div class="card-body">
                <div class="col-12">
                    <div class="row">
                        <div class="col-4 border-right px-3">
                            <img id="@Producto.id.ToString()" src="" class="img-thumbnail" style="width:100%; height:auto">
                            <div class="py-2 float-right">
                                <a class="text-decoration-none text-muted"><span class="oi oi-data-transfer-upload"></span> Cambiar imagen</a>
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="col-12">
                                <div class="row justify-content-between">
                                    <h4>Información</h4>
                                    <button type="button" class="btn @ChangeButton @IsActived" @onclick="EditInfo"><span class="oi @ChangeIcon"></span></button>
                                </div>
                            </div>
                            <EditForm Model="Producto" OnValidSubmit="@(e => EditProducto(Producto))">

                                <div class="form-row">
                                    <div class="form-group col-6 px-2">
                                        <label>Nombre</label>
                                        <input type="text" class="form-control" disabled="@IsDisabled" @bind-value="Producto.nombre" />
                                    </div>

                                    <div class="form-group col-6 px-2">
                                        <label>Escuela</label>
                                        <InputSelect class="form-control" @bind-Value="Producto.escuela.id" disabled="@IsDisabled">
                                            @foreach (EscuelaModel escuela in Escuelas)
                                                {
                                                <option value="@escuela.id.ToString()">@escuela.nombre</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>
                                
                                <div class="form-row">
                                    <div class="form-group col-6 px-2">
                                        <label>Subcategoría</label>
                                        <InputSelect class="form-control" @bind-Value="Producto.subcategoria.id" disabled="@IsDisabled">
                                            @foreach (SubcategoriaModel Subcategoria in Subcategorias)
                                                {
                                                <option value="@Subcategoria.id.ToString()">@Subcategoria.nombre</option>
                                                }
                                        </InputSelect>
                                    </div>
                                    <div class="form-group col-6 px-2">
                                        <label>Categoría</label>
                                        <InputSelect class="form-control" @bind-Value="Producto.subcategoria.categoria.id" disabled="@IsDisabled">
                                            @foreach (CategoriaModel Categoria in Categorias)
                                                {
                                                <option value="@Categoria.id.ToString()">@Categoria.nombre</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group col-8 px-2">
                                        <label>Descripción</label>
                                        <textarea class="form-control" rows="4" disabled="@IsDisabled" @bind="Producto.descripcion"></textarea>
                                    </div>
                                    <div class="col-4 px-2">
                                        <div class="form-group">
                                            <label>Fecha de creación</label>
                                            <input type="text" class="form-control" disabled @bind="Producto.fechaCreacion" />
                                        </div>
                                        <div class="form-group">
                                            <label>Ultima actualización</label>
                                            <input type="text" class="form-control" disabled @bind="Producto.fechaActualizacion" />
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Id { get; set; }

    private ProductoModel Producto;
    private List<SubcategoriaModel> Subcategorias;
    private List<CategoriaModel> Categorias;
    private List<EscuelaModel> Escuelas;

    private bool IsDisabled = true;
    public string IsActived = "";
    public string ChangeIcon = "oi-pencil";
    public string ChangeButton = "btn-outline-primary";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Producto = await Http.GetJsonAsync<ProductoModel>("http://localhost:8080/producto/" + Id);
            Subcategorias = await Http.GetJsonAsync<List<SubcategoriaModel>>("http://localhost:8080/subcategoria");
            Categorias = await Http.GetJsonAsync<List<CategoriaModel>>("http://localhost:8080/categoria");
            Escuelas = await Http.GetJsonAsync<List<EscuelaModel>>("http://localhost:8080/escuela");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Producto != null && Producto.id > 0)
        {
            await Js.RenderImagen(Producto.id.ToString(), Producto.imagenProducto.tipo, Producto.imagenProducto.imagen);
        }
    }

    private async Task EditInfo()
    {
        if (IsDisabled)
        {
            IsActived = "active";
            ChangeIcon = "oi-check";
            ChangeButton = "btn-outline-success";
            IsDisabled = false;
        } else
        {
            var response = await ConfirmEditProducto();

            if (response)
            {
                ChangeIcon = "oi-pencil";
                ChangeButton = "btn-outline-primary";
                IsActived = "";
                IsDisabled = true;
            }
        }
    }

    private async Task<bool> ConfirmEditProducto()
    {
        var response = await Js.Confirm("¿Estás seguro/a?", "Al confirmar se editará el producto.", TipoMensajeSweetAlert.question);

        if (response)
        {
            await EditProducto(Producto);
            await Js.MostrarMensaje("Editado!", "El producto se ha editado correctamente.", TipoMensajeSweetAlert.success);
        }

        return response;
    }

    private async Task EditProducto(ProductoModel producto)
    {
        string body = producto.EditFormatJson(producto);
        byte[] byteArray = System.Text.Encoding.ASCII.GetBytes(body);
        System.IO.MemoryStream stream = new System.IO.MemoryStream(byteArray);

        StreamContent content = new StreamContent(stream);
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Headers.ContentDisposition.Name = "\"body\"";
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/plain");

        string boundary = "EdicionProducto";
        MultipartFormDataContent form = new MultipartFormDataContent(boundary);
        form.Headers.Remove("Content-Type");
        form.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary);

        form.Add(content);



        var result = await Http.PostAsync(new Uri("http://localhost:8080/producto/" + producto.id.ToString()), form);
    }
}

@using DataModel
@using FormModel
@inject NavigationManager Navigation
@inject IJSRuntime Js
@inject HttpClient Http

<div class="py-3 col-12">
    <div class="shadow card">
        <div class="card-header font-weight-bold" style="color: #343A40">@(Titulo)</div>
        <div class="card-body">
            <EditForm Model="FiltrosModel">
                <div class="col-12">
                    <div class="row justify-content-between">
                        <h4>Filtros <a class="text-muted"><span class="oi oi-loop-circular" @onclick="OnInitializedAsync" style="vertical-align: text-bottom"></span></a></h4>
                        <button type="submit" class="btn btn-primary" @onclick="FilterSolicitudes"><span class="oi oi-magnifying-glass"></span> Aplicar</button>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-4">
                        <label>Búsqueda por nombre de solicitante</label>
                        <input class="form-control" type="text" @bind="FiltrosModel.nombreSolicitante" placeholder="@("Busqueda por nombre (ej." + @"""Rick Sanchez"")")" />
                    </div>
                    <div class="form-group col-4">
                        <label>Perfil solicitante</label>
                        <InputSelect class="form-control" @bind-Value="FiltrosModel.perfilSolicitante">
                            <option class="text-muted" value="">--Seleccione perfil--</option>
                            <option value="alumno">Alumno</option>
                            <option value="docente">Docente</option>
                        </InputSelect>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (Solicitudes == null)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <img src="images/loading.svg" alt="Cargando" />
        </div>
    </div>
}
else if (Solicitudes.Count == 0)
{
    <div class="col-12">
        <div class="row justify-content-center">
            <p class="text-muted">No se encontraron solicitudes.</p>
        </div>
    </div>
}
else
{
    <div class="py-3 col-12">
        <div class="shadow card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Código</th>
                                <th scope="col">Solicitante</th>
                                <th scope="col">Perfil Solicitante</th>
                                <th scope="col">Panolero Responsable</th>
                                <th scope="col">Fecha Ingreso</th>
                                <th scope="col">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Solicitud in Solicitudes)
                            {
                                <tr>
                                    <th scope="row">@Solicitud.id</th>
                                    @if (Solicitud.usuario.alumno != null)
                                    {
                                        <td>@(Solicitud.usuario.alumno.nombre + " " + Solicitud.usuario.alumno.apellidoPaterno)</td>
                                    }
                                    @if (Solicitud.usuario.docente != null)
                                    {
                                        <td>@(Solicitud.usuario.docente.nombre + " " + Solicitud.usuario.docente.apellidoPaterno)</td>
                                    }
                                    <td>@Solicitud.usuario.perfil</td>
                                    <td>@(Solicitud.panolero.nombre + " " + Solicitud.panolero.apellidoPaterno)</td>
                                    <td><span class="badge badge-pill @(ChangeClassFromDate(Solicitud.fechaCreacion)) font-weight-normal" style="font-size: 95%">@(TransformDate(Solicitud.fechaCreacion))</span></td>
                                    <td>
                                        <div class="btn-group col-12" role="group" aria-label="Basic example">
                                            <button type="button" class="btn btn-secondary" @onclick="@(e => ViewSolicitud(Solicitud.id))">
                                                <span class="oi oi-eye"></span>  /  <span class="oi oi-pencil"></span>
                                            </button>
                                            <button type="button" class="btn btn-secondary">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<SolicitudModel> Solicitudes { get; set; }
    [Parameter] public string Titulo { get; set; }

    private FiltrosSolicitudesModel FiltrosModel = new FiltrosSolicitudesModel();

    protected override async Task OnInitializedAsync()
    {
        Solicitudes = null;
        Solicitudes = await Http.GetJsonAsync<List<SolicitudModel>>("http://localhost:8080/solicitud");

        FiltrosModel = new FiltrosSolicitudesModel();
    }

    private void ViewSolicitud(int Id)
    {
        Navigation.NavigateTo("solicitudes/" + Id.ToString());
    }

    private async Task FilterSolicitudes()
    {
        Solicitudes = null;
        List<SolicitudModel> SolicitudesToFilter = await Http.GetJsonAsync<List<SolicitudModel>>("http://localhost:8080/solicitud");

        if (FiltrosModel.perfilSolicitante != null && FiltrosModel.perfilSolicitante != "")
        {
            foreach (SolicitudModel solicitud in SolicitudesToFilter.ToList())
            {
                if (solicitud.usuario.perfil.ToUpper() != FiltrosModel.perfilSolicitante.ToUpper())
                {
                    SolicitudesToFilter.Remove(solicitud);
                }
            }
        }

        if (FiltrosModel.nombreSolicitante != null && FiltrosModel.nombreSolicitante != "")
        {
            string nombre = "";
            foreach (SolicitudModel solicitud in SolicitudesToFilter.ToList())
            {
                if (solicitud.usuario.perfil == "ALUMNO")
                {
                    nombre = solicitud.usuario.alumno.nombre + " " + solicitud.usuario.alumno.apellidoPaterno + " " + solicitud.usuario.alumno.apellidoMaterno;
                }
                else
                {
                    nombre = solicitud.usuario.docente.nombre + " " + solicitud.usuario.docente.apellidoPaterno + " " + solicitud.usuario.docente.apellidoMaterno;
                }

                nombre = nombre.ToUpper();

                if (!nombre.Contains(FiltrosModel.nombreSolicitante.ToUpper()))
                {
                    SolicitudesToFilter.Remove(solicitud);
                }
                nombre = "";
            }
        }

        Solicitudes = SolicitudesToFilter;
    }

    private string ChangeClassFromDate(string creationDate)
    {
        DateTime dateInput = DateTime.ParseExact(creationDate, "yyyy-MM-dd HH:mm:ss", null);
        var dateDiferential = (DateTime.Now.AddHours(-4) - dateInput);
        string classOutput = "badge-info text-light";

        if (dateDiferential.Days == 0)
        {
            classOutput = "badge-warning text-black-50";
        }

        return classOutput;
    }

    private string TransformDate(string creationDate)
    {
        DateTime dateInput = DateTime.ParseExact(creationDate, "yyyy-MM-dd HH:mm:ss", null);
        var dateDiferential = (DateTime.Now.AddHours(-4) - dateInput);
        string dateOutput = "";

        if (dateDiferential.Days > 1)
        {
            dateOutput = dateInput.ToString("dd/MM/yyyy");
            dateOutput.Replace(' ', '/');
            return dateOutput;
        }

        if (dateDiferential.Days == 1)
        {
            dateOutput = "ayer";
            return dateOutput;
        }

        if (dateDiferential.Hours == 1)
        {
            dateOutput = "hace " + dateDiferential.Hours + " hora";
            return dateOutput;
        }

        if (dateDiferential.Hours <= 23 && dateDiferential.Hours > 1)
        {
            dateOutput = "hace " + dateDiferential.Hours + " hrs.";
            return dateOutput;
        }

        if (dateDiferential.Minutes <= 59 && dateDiferential.Minutes >= 5)
        {
            dateOutput = "hace " + dateDiferential.Minutes + " min.";
            return dateOutput;
        }

        if (dateDiferential.Minutes < 5)
        {
            dateOutput = "recién";
            return dateOutput;
        }

        return "No se pudo calcular!";
    }
}

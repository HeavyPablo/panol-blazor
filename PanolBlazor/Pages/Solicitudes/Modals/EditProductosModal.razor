@inject IJSRuntime Js
@inject HttpClient Http

@using System.Net.Http
@using DataModel
@using FormModel

<div class="modal fade" id="AddProductosModal" tabindex="-1" aria-labelledby="AddProductosModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar Productos</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @* Aqui empieza el filtro *@
                <EditForm Model="FiltrosModel">
                    <div class="col-12">
                        <div class="row justify-content-between">
                            <h3>Filtros <a class="text-muted"><span class="oi oi-loop-circular" @onclick="OnInitializedAsync" style="vertical-align: text-bottom"></span></a></h3>
                            <button type="submit" class="btn btn-primary" @onclick="FilterProductos"><span class="oi oi-magnifying-glass"></span> Aplicar</button>
                        </div>
                    </div>
                    <div class="row justify-content-between">
                        <div class="form-group col-4">
                            <label>Búsqueda</label>
                            <input class="form-control" type="text" @bind="FiltrosModel.Nombre" placeholder="@("Busqueda por nombre (ej." + @"""Computador" + @""")")" />
                        </div>
                        <div class="form-group col-4">
                            <label>Subcategoria</label>
                            <InputSelect class="form-control" @bind-Value="FiltrosModel.Subcategoria">
                                <option class="text-muted" value="">--Seleccione subcategoria--</option>
                                @foreach (SubcategoriaModel Subcategoria in Subcategorias)
                                {
                                    <option value="@Subcategoria.id.ToString()">@Subcategoria.nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group col-4">
                            <label>Categoria</label>
                            <InputSelect class="form-control" @bind-Value="FiltrosModel.Categoria">
                                <option class="text-muted" value="">--Seleccione categoria--</option>
                                @foreach (CategoriaModel Categoria in Categorias)
                                {
                                    <option value="@Categoria.id.ToString()">@Categoria.nombre</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </EditForm>
                <hr />
                <div class="col-12">
                    <div class="row" style="min-height: 404px;">
                        @if (ProductosSA == null)
                        {
                            <div class="col-12">
                                <div class="row justify-content-center">
                                    <img src="images/loading.svg" alt="Cargando" />
                                </div>
                            </div>

                        }
                        else if (ProductosSA.Count <= 0)
                        {
                            <div class="col-12">
                                <div class="row justify-content-center">
                                    <p class="text-muted">No se encontraron productos.</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var Producto in ProductosSA)
                            {
                                <div class="px-2">
                                    <div class="card" style="width: 15rem;">
                                        <img id="@Producto.id.ToString()" src="" class="card-img-top border-bottom" style="height: 10rem;">
                                        <div class="card-body">
                                            <h5 class="card-title">@Producto.nombre</h5>
                                            <p class="card-text">Escuela: @Producto.escuela.nombre</p>
                                            <p class="card-text">Subcategoria: @Producto.subcategoria.nombre</p>
                                            @if (!Solicitud.productos.Contains(Producto))
                                            {
                                                <button class="col-12 btn btn-primary" @onclick="@(e => AddProductoToSolicitud(Producto))"><span class="oi oi-plus"></span> Agregar</button>
                                            }
                                            else
                                            {
                                                <button class="col-12 btn btn-secondary" disabled>Sin disponibilidad</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <hr />
                    <div class="py-3">
                        <h4>Productos agregados</h4>
                        <div class="table-responsive">
                            <table class="table">
                                <thead class="thead-dark">
                                    <tr>
                                        <th scope="col">Id</th>
                                        <th scope="col">Nombre</th>
                                        <th scope="col">Subcategoria</th>
                                        <th scope="col">Categoria</th>
                                        <th scope="col">Escuela</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ProductosSolicitud != null)
                                    {
                                        @foreach (ProductoModel Producto in ProductosSolicitud)
                                        {
                                            <tr>
                                                <th scope="row">@Producto.id</th>
                                                <td>@Producto.nombre</td>
                                                <td>@Producto.subcategoria.nombre</td>
                                                <td>@Producto.subcategoria.categoria.nombre</td>
                                                <td>@Producto.escuela.nombre</td>
                                                <td>
                                                    <button class="btn btn-danger" @onclick="@(e => RemoveProductoOfSolicitud(Producto))"><span class="oi oi-trash"></span></button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SaveChangeProductosSolicitud">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<ProductoModel> ProductosSolicitud { get; set; }
    [Parameter] public SolicitudModel Solicitud { get; set; }
    [Parameter] public EventCallback<Boolean> OnRefresh { get; set; }

    private List<ProductoModel> ProductosSA = new List<ProductoModel>();
    private List<CategoriaModel> Categorias = new List<CategoriaModel>();
    private List<SubcategoriaModel> Subcategorias = new List<SubcategoriaModel>();
    private FiltrosProductoModel FiltrosModel = new FiltrosProductoModel();

    // este metodo se ejecuta cuando se inicializa la pagina (antes de cargar el DOM) .. 
    //normalmente se ejecuta 1 vez pero puede llamarlo las veces que quieras manualmente.
    protected override async Task OnInitializedAsync()
    {
        ProductosSA = null;
        ProductosSA = await Http.GetJsonAsync<List<ProductoModel>>("http://localhost:8080/producto");
        if (Categorias == null || Categorias.Count <= 0)
        {
            Categorias = await Http.GetJsonAsync<List<CategoriaModel>>("http://localhost:8080/categoria");
        }
        if (Subcategorias == null || Subcategorias.Count <= 0)
        {
            Subcategorias = await Http.GetJsonAsync<List<SubcategoriaModel>>("http://localhost:8080/subcategoria");
        }

        FiltrosModel = new FiltrosProductoModel();
    }

    // Este metodo se ejecuta despues de cada vez que se actualiza el DOM.. 
    // el parametro firstRender te sirve para que lo puedas ejecutar una unica vez.. en este caso no lo uso
    // pero si lo quiere usar .. debes ponerlo dentro de un if ej. " if (firstRender) { ... } "
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProductosSA != null && ProductosSA.Count > 0)
        {
            foreach (ProductoModel producto in ProductosSA)
            {
                await Js.RenderImagen(producto.id.ToString(), producto.imagenProducto.tipo, producto.imagenProducto.imagen);
            }
        }
    }

    private void AddProductoToSolicitud(ProductoModel producto)
    {
        ProductosSolicitud.Add(producto);
    }

    private void RemoveProductoOfSolicitud(ProductoModel producto)
    {
        ProductosSolicitud.Remove(producto);
    }


    // Basicamente lo unico que hago es actualizar (elimino los que no son) la tabla teniendo de baso todos los productos.
    private async Task FilterProductos()
    {
        // Primero se deja nulo los productos (para que se vea el svg de loading)
        ProductosSA = null;
        // capturo todos los productos de la bd.
        List<ProductoModel> ProductosToFilter = await Http.GetJsonAsync<List<ProductoModel>>("http://localhost:8080/producto");

        // aplico primero el filtro de categoria .. si este campo no esta vacio.
        if (FiltrosModel.Categoria != null && FiltrosModel.Categoria != "")
        {
            // el metodo .ToList() sirve si te da el error "Collection was modified; enumeration operation may not execute"
            // si no te da el error no es necesario pero es mejor prevenir ajaj.
            foreach (ProductoModel producto in ProductosToFilter.ToList())
            {
                // se borran los productos de la tabla qe no coincidan con la categoria
                if (producto.subcategoria.categoria.id != int.Parse(FiltrosModel.Categoria))
                {
                    ProductosToFilter.Remove(producto);
                }
            }
        }

        if (FiltrosModel.Subcategoria != null && FiltrosModel.Subcategoria != "")
        {
            foreach (ProductoModel producto in ProductosToFilter.ToList())
            {
                if (producto.subcategoria.id != int.Parse(FiltrosModel.Subcategoria))
                {
                    ProductosToFilter.Remove(producto);
                }
            }
        }

        if (FiltrosModel.Nombre != null && FiltrosModel.Nombre != "")
        {
            foreach(ProductoModel producto in ProductosToFilter.ToList())
            {
                if (!producto.nombre.Contains(FiltrosModel.Nombre))
                {
                    ProductosToFilter.Remove(producto);
                }
            }
        }

        ProductosSA = ProductosToFilter;
    }

    private async Task SaveChangeProductosSolicitud()
    {

        var response = await Js.Confirm("¿Estás seguro/a?", "Al confirmar se editará la solicitud.", TipoMensajeSweetAlert.question);

        if (response)
        {
            Solicitud.productos = ProductosSolicitud;

            if (Solicitud.id != 0)
            {
                var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("http://localhost:8080/solicitud/" + Solicitud.id.ToString()),
                    Content = new StringContent(
                                        Solicitud.EditFormatJson(Solicitud, Solicitud.usuario.username, Solicitud.panolero.rut, Solicitud.productos)
                                    )
                };

                requestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                requestMessage.Content.Headers.TryAddWithoutValidation("x-custom-header", "value");

                var result = await Http.SendAsync(requestMessage);
            }
            await OnRefresh.InvokeAsync(true);
            await Js.MostrarMensaje("Editado!", "La solicitud se ha editado correctamente.", TipoMensajeSweetAlert.success);
            await Js.CloseModal("AddProductosModal");
        }
    }
}
